// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestData.Proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TestData.Proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TestData {

namespace {

const ::google::protobuf::Descriptor* TestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TestData_Test2_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TestData_Test2_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TestData_2eProto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_TestData_2eProto() {
  protobuf_AddDesc_TestData_2eProto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TestData.Proto");
  GOOGLE_CHECK(file != NULL);
  TestData_descriptor_ = file->message_type(0);
  static const int TestData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData, data2_),
  };
  TestData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestData_descriptor_,
      TestData::internal_default_instance(),
      TestData_offsets_,
      -1,
      -1,
      -1,
      sizeof(TestData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData, _internal_metadata_));
  TestData_Test2_descriptor_ = TestData_descriptor_->nested_type(0);
  static const int TestData_Test2_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData_Test2, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData_Test2, b_),
  };
  TestData_Test2_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TestData_Test2_descriptor_,
      TestData_Test2::internal_default_instance(),
      TestData_Test2_offsets_,
      -1,
      -1,
      -1,
      sizeof(TestData_Test2),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestData_Test2, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TestData_2eProto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestData_descriptor_, TestData::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TestData_Test2_descriptor_, TestData_Test2::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TestData_2eProto() {
  TestData_default_instance_.Shutdown();
  delete TestData_reflection_;
  TestData_Test2_default_instance_.Shutdown();
  delete TestData_Test2_reflection_;
}

void protobuf_InitDefaults_TestData_2eProto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  TestData_default_instance_.DefaultConstruct();
  TestData_Test2_default_instance_.DefaultConstruct();
  TestData_default_instance_.get_mutable()->InitAsDefaultInstance();
  TestData_Test2_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_TestData_2eProto_once_);
void protobuf_InitDefaults_TestData_2eProto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_TestData_2eProto_once_,
                 &protobuf_InitDefaults_TestData_2eProto_impl);
}
void protobuf_AddDesc_TestData_2eProto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_TestData_2eProto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016TestData.Proto\022\010TestData\"l\n\010TestData\022\n"
    "\n\002Id\030\001 \001(\005\022\014\n\004Data\030\002 \003(\t\022\'\n\005Data2\030\003 \003(\0132"
    "\030.TestData.TestData.Test2\032\035\n\005Test2\022\t\n\001A\030"
    "\001 \001(\005\022\t\n\001B\030\002 \001(\005b\006proto3", 144);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TestData.Proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TestData_2eProto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_TestData_2eProto_once_);
void protobuf_AddDesc_TestData_2eProto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_TestData_2eProto_once_,
                 &protobuf_AddDesc_TestData_2eProto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TestData_2eProto {
  StaticDescriptorInitializer_TestData_2eProto() {
    protobuf_AddDesc_TestData_2eProto();
  }
} static_descriptor_initializer_TestData_2eProto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestData_Test2::kAFieldNumber;
const int TestData_Test2::kBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestData_Test2::TestData_Test2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_TestData_2eProto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:TestData.TestData.Test2)
}

void TestData_Test2::InitAsDefaultInstance() {
}

TestData_Test2::TestData_Test2(const TestData_Test2& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TestData.TestData.Test2)
}

void TestData_Test2::SharedCtor() {
  ::memset(&a_, 0, reinterpret_cast<char*>(&b_) -
    reinterpret_cast<char*>(&a_) + sizeof(b_));
  _cached_size_ = 0;
}

TestData_Test2::~TestData_Test2() {
  // @@protoc_insertion_point(destructor:TestData.TestData.Test2)
  SharedDtor();
}

void TestData_Test2::SharedDtor() {
}

void TestData_Test2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestData_Test2::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestData_Test2_descriptor_;
}

const TestData_Test2& TestData_Test2::default_instance() {
  protobuf_InitDefaults_TestData_2eProto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TestData_Test2> TestData_Test2_default_instance_;

TestData_Test2* TestData_Test2::New(::google::protobuf::Arena* arena) const {
  TestData_Test2* n = new TestData_Test2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestData_Test2::Clear() {
// @@protoc_insertion_point(message_clear_start:TestData.TestData.Test2)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TestData_Test2, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TestData_Test2*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(a_, b_);

#undef ZR_HELPER_
#undef ZR_

}

bool TestData_Test2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TestData.TestData.Test2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 A = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_B;
        break;
      }

      // optional int32 B = 2;
      case 2: {
        if (tag == 16) {
         parse_B:

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TestData.TestData.Test2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TestData.TestData.Test2)
  return false;
#undef DO_
}

void TestData_Test2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TestData.TestData.Test2)
  // optional int32 A = 1;
  if (this->a() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->a(), output);
  }

  // optional int32 B = 2;
  if (this->b() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->b(), output);
  }

  // @@protoc_insertion_point(serialize_end:TestData.TestData.Test2)
}

::google::protobuf::uint8* TestData_Test2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TestData.TestData.Test2)
  // optional int32 A = 1;
  if (this->a() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->a(), target);
  }

  // optional int32 B = 2;
  if (this->b() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->b(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:TestData.TestData.Test2)
  return target;
}

size_t TestData_Test2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestData.TestData.Test2)
  size_t total_size = 0;

  // optional int32 A = 1;
  if (this->a() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->a());
  }

  // optional int32 B = 2;
  if (this->b() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->b());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestData_Test2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TestData.TestData.Test2)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TestData_Test2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestData_Test2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TestData.TestData.Test2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TestData.TestData.Test2)
    UnsafeMergeFrom(*source);
  }
}

void TestData_Test2::MergeFrom(const TestData_Test2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TestData.TestData.Test2)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TestData_Test2::UnsafeMergeFrom(const TestData_Test2& from) {
  GOOGLE_DCHECK(&from != this);
  if (from.a() != 0) {
    set_a(from.a());
  }
  if (from.b() != 0) {
    set_b(from.b());
  }
}

void TestData_Test2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TestData.TestData.Test2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestData_Test2::CopyFrom(const TestData_Test2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestData.TestData.Test2)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TestData_Test2::IsInitialized() const {

  return true;
}

void TestData_Test2::Swap(TestData_Test2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestData_Test2::InternalSwap(TestData_Test2* other) {
  std::swap(a_, other->a_);
  std::swap(b_, other->b_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestData_Test2::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestData_Test2_descriptor_;
  metadata.reflection = TestData_Test2_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TestData::kIdFieldNumber;
const int TestData::kDataFieldNumber;
const int TestData::kData2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TestData::TestData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_TestData_2eProto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:TestData.TestData)
}

void TestData::InitAsDefaultInstance() {
}

TestData::TestData(const TestData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:TestData.TestData)
}

void TestData::SharedCtor() {
  id_ = 0;
  _cached_size_ = 0;
}

TestData::~TestData() {
  // @@protoc_insertion_point(destructor:TestData.TestData)
  SharedDtor();
}

void TestData::SharedDtor() {
}

void TestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestData_descriptor_;
}

const TestData& TestData::default_instance() {
  protobuf_InitDefaults_TestData_2eProto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TestData> TestData_default_instance_;

TestData* TestData::New(::google::protobuf::Arena* arena) const {
  TestData* n = new TestData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TestData::Clear() {
// @@protoc_insertion_point(message_clear_start:TestData.TestData)
  id_ = 0;
  data_.Clear();
  data2_.Clear();
}

bool TestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TestData.TestData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Id = 1;
      case 1: {
        if (tag == 8) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        break;
      }

      // repeated string Data = 2;
      case 2: {
        if (tag == 18) {
         parse_Data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data(this->data_size() - 1).data(),
            this->data(this->data_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "TestData.TestData.Data"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_Data;
        if (input->ExpectTag(26)) goto parse_Data2;
        break;
      }

      // repeated .TestData.TestData.Test2 Data2 = 3;
      case 3: {
        if (tag == 26) {
         parse_Data2:
          DO_(input->IncrementRecursionDepth());
         parse_loop_Data2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_data2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_loop_Data2;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TestData.TestData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TestData.TestData)
  return false;
#undef DO_
}

void TestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TestData.TestData)
  // optional int32 Id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated string Data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data(i).data(), this->data(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TestData.TestData.Data");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->data(i), output);
  }

  // repeated .TestData.TestData.Test2 Data2 = 3;
  for (unsigned int i = 0, n = this->data2_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->data2(i), output);
  }

  // @@protoc_insertion_point(serialize_end:TestData.TestData)
}

::google::protobuf::uint8* TestData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TestData.TestData)
  // optional int32 Id = 1;
  if (this->id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated string Data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data(i).data(), this->data(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "TestData.TestData.Data");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->data(i), target);
  }

  // repeated .TestData.TestData.Test2 Data2 = 3;
  for (unsigned int i = 0, n = this->data2_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->data2(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:TestData.TestData)
  return target;
}

size_t TestData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestData.TestData)
  size_t total_size = 0;

  // optional int32 Id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }

  // repeated string Data = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->data_size());
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->data(i));
  }

  // repeated .TestData.TestData.Test2 Data2 = 3;
  {
    unsigned int count = this->data2_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data2(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TestData.TestData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TestData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TestData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TestData.TestData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TestData.TestData)
    UnsafeMergeFrom(*source);
  }
}

void TestData::MergeFrom(const TestData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TestData.TestData)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TestData::UnsafeMergeFrom(const TestData& from) {
  GOOGLE_DCHECK(&from != this);
  data_.UnsafeMergeFrom(from.data_);
  data2_.MergeFrom(from.data2_);
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void TestData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TestData.TestData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestData::CopyFrom(const TestData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestData.TestData)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TestData::IsInitialized() const {

  return true;
}

void TestData::Swap(TestData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TestData::InternalSwap(TestData* other) {
  std::swap(id_, other->id_);
  data_.UnsafeArenaSwap(&other->data_);
  data2_.UnsafeArenaSwap(&other->data2_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TestData_descriptor_;
  metadata.reflection = TestData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TestData_Test2

// optional int32 A = 1;
void TestData_Test2::clear_a() {
  a_ = 0;
}
::google::protobuf::int32 TestData_Test2::a() const {
  // @@protoc_insertion_point(field_get:TestData.TestData.Test2.A)
  return a_;
}
void TestData_Test2::set_a(::google::protobuf::int32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:TestData.TestData.Test2.A)
}

// optional int32 B = 2;
void TestData_Test2::clear_b() {
  b_ = 0;
}
::google::protobuf::int32 TestData_Test2::b() const {
  // @@protoc_insertion_point(field_get:TestData.TestData.Test2.B)
  return b_;
}
void TestData_Test2::set_b(::google::protobuf::int32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:TestData.TestData.Test2.B)
}

inline const TestData_Test2* TestData_Test2::internal_default_instance() {
  return &TestData_Test2_default_instance_.get();
}
// -------------------------------------------------------------------

// TestData

// optional int32 Id = 1;
void TestData::clear_id() {
  id_ = 0;
}
::google::protobuf::int32 TestData::id() const {
  // @@protoc_insertion_point(field_get:TestData.TestData.Id)
  return id_;
}
void TestData::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TestData.TestData.Id)
}

// repeated string Data = 2;
int TestData::data_size() const {
  return data_.size();
}
void TestData::clear_data() {
  data_.Clear();
}
const ::std::string& TestData::data(int index) const {
  // @@protoc_insertion_point(field_get:TestData.TestData.Data)
  return data_.Get(index);
}
::std::string* TestData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:TestData.TestData.Data)
  return data_.Mutable(index);
}
void TestData::set_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TestData.TestData.Data)
  data_.Mutable(index)->assign(value);
}
void TestData::set_data(int index, const char* value) {
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TestData.TestData.Data)
}
void TestData::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TestData.TestData.Data)
}
::std::string* TestData::add_data() {
  // @@protoc_insertion_point(field_add_mutable:TestData.TestData.Data)
  return data_.Add();
}
void TestData::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TestData.TestData.Data)
}
void TestData::add_data(const char* value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TestData.TestData.Data)
}
void TestData::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TestData.TestData.Data)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestData::data() const {
  // @@protoc_insertion_point(field_list:TestData.TestData.Data)
  return data_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
TestData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:TestData.TestData.Data)
  return &data_;
}

// repeated .TestData.TestData.Test2 Data2 = 3;
int TestData::data2_size() const {
  return data2_.size();
}
void TestData::clear_data2() {
  data2_.Clear();
}
const ::TestData::TestData_Test2& TestData::data2(int index) const {
  // @@protoc_insertion_point(field_get:TestData.TestData.Data2)
  return data2_.Get(index);
}
::TestData::TestData_Test2* TestData::mutable_data2(int index) {
  // @@protoc_insertion_point(field_mutable:TestData.TestData.Data2)
  return data2_.Mutable(index);
}
::TestData::TestData_Test2* TestData::add_data2() {
  // @@protoc_insertion_point(field_add:TestData.TestData.Data2)
  return data2_.Add();
}
::google::protobuf::RepeatedPtrField< ::TestData::TestData_Test2 >*
TestData::mutable_data2() {
  // @@protoc_insertion_point(field_mutable_list:TestData.TestData.Data2)
  return &data2_;
}
const ::google::protobuf::RepeatedPtrField< ::TestData::TestData_Test2 >&
TestData::data2() const {
  // @@protoc_insertion_point(field_list:TestData.TestData.Data2)
  return data2_;
}

inline const TestData* TestData::internal_default_instance() {
  return &TestData_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace TestData

// @@protoc_insertion_point(global_scope)
