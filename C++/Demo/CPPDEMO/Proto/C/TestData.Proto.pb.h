// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TestData.Proto

#ifndef PROTOBUF_TestData_2eProto__INCLUDED
#define PROTOBUF_TestData_2eProto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace TestData {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_TestData_2eProto();
void protobuf_InitDefaults_TestData_2eProto();
void protobuf_AssignDesc_TestData_2eProto();
void protobuf_ShutdownFile_TestData_2eProto();

class TestData;
class TestData_Test2;

// ===================================================================

class TestData_Test2 : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TestData.TestData.Test2) */ {
 public:
  TestData_Test2();
  virtual ~TestData_Test2();

  TestData_Test2(const TestData_Test2& from);

  inline TestData_Test2& operator=(const TestData_Test2& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestData_Test2& default_instance();

  static const TestData_Test2* internal_default_instance();

  void Swap(TestData_Test2* other);

  // implements Message ----------------------------------------------

  inline TestData_Test2* New() const { return New(NULL); }

  TestData_Test2* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestData_Test2& from);
  void MergeFrom(const TestData_Test2& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestData_Test2* other);
  void UnsafeMergeFrom(const TestData_Test2& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 A = 1;
  void clear_a();
  static const int kAFieldNumber = 1;
  ::google::protobuf::int32 a() const;
  void set_a(::google::protobuf::int32 value);

  // optional int32 B = 2;
  void clear_b();
  static const int kBFieldNumber = 2;
  ::google::protobuf::int32 b() const;
  void set_b(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TestData.TestData.Test2)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 a_;
  ::google::protobuf::int32 b_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_TestData_2eProto_impl();
  friend void  protobuf_AddDesc_TestData_2eProto_impl();
  friend void protobuf_AssignDesc_TestData_2eProto();
  friend void protobuf_ShutdownFile_TestData_2eProto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TestData_Test2> TestData_Test2_default_instance_;

// -------------------------------------------------------------------

class TestData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TestData.TestData) */ {
 public:
  TestData();
  virtual ~TestData();

  TestData(const TestData& from);

  inline TestData& operator=(const TestData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TestData& default_instance();

  static const TestData* internal_default_instance();

  void Swap(TestData* other);

  // implements Message ----------------------------------------------

  inline TestData* New() const { return New(NULL); }

  TestData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TestData& from);
  void MergeFrom(const TestData& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TestData* other);
  void UnsafeMergeFrom(const TestData& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TestData_Test2 Test2;

  // accessors -------------------------------------------------------

  // optional int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // repeated string Data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data(int index) const;
  ::std::string* mutable_data(int index);
  void set_data(int index, const ::std::string& value);
  void set_data(int index, const char* value);
  void set_data(int index, const char* value, size_t size);
  ::std::string* add_data();
  void add_data(const ::std::string& value);
  void add_data(const char* value);
  void add_data(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& data() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_data();

  // repeated .TestData.TestData.Test2 Data2 = 3;
  int data2_size() const;
  void clear_data2();
  static const int kData2FieldNumber = 3;
  const ::TestData::TestData_Test2& data2(int index) const;
  ::TestData::TestData_Test2* mutable_data2(int index);
  ::TestData::TestData_Test2* add_data2();
  ::google::protobuf::RepeatedPtrField< ::TestData::TestData_Test2 >*
      mutable_data2();
  const ::google::protobuf::RepeatedPtrField< ::TestData::TestData_Test2 >&
      data2() const;

  // @@protoc_insertion_point(class_scope:TestData.TestData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> data_;
  ::google::protobuf::RepeatedPtrField< ::TestData::TestData_Test2 > data2_;
  ::google::protobuf::int32 id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_TestData_2eProto_impl();
  friend void  protobuf_AddDesc_TestData_2eProto_impl();
  friend void protobuf_AssignDesc_TestData_2eProto();
  friend void protobuf_ShutdownFile_TestData_2eProto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TestData> TestData_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TestData_Test2

// optional int32 A = 1;
inline void TestData_Test2::clear_a() {
  a_ = 0;
}
inline ::google::protobuf::int32 TestData_Test2::a() const {
  // @@protoc_insertion_point(field_get:TestData.TestData.Test2.A)
  return a_;
}
inline void TestData_Test2::set_a(::google::protobuf::int32 value) {
  
  a_ = value;
  // @@protoc_insertion_point(field_set:TestData.TestData.Test2.A)
}

// optional int32 B = 2;
inline void TestData_Test2::clear_b() {
  b_ = 0;
}
inline ::google::protobuf::int32 TestData_Test2::b() const {
  // @@protoc_insertion_point(field_get:TestData.TestData.Test2.B)
  return b_;
}
inline void TestData_Test2::set_b(::google::protobuf::int32 value) {
  
  b_ = value;
  // @@protoc_insertion_point(field_set:TestData.TestData.Test2.B)
}

inline const TestData_Test2* TestData_Test2::internal_default_instance() {
  return &TestData_Test2_default_instance_.get();
}
// -------------------------------------------------------------------

// TestData

// optional int32 Id = 1;
inline void TestData::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 TestData::id() const {
  // @@protoc_insertion_point(field_get:TestData.TestData.Id)
  return id_;
}
inline void TestData::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TestData.TestData.Id)
}

// repeated string Data = 2;
inline int TestData::data_size() const {
  return data_.size();
}
inline void TestData::clear_data() {
  data_.Clear();
}
inline const ::std::string& TestData::data(int index) const {
  // @@protoc_insertion_point(field_get:TestData.TestData.Data)
  return data_.Get(index);
}
inline ::std::string* TestData::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:TestData.TestData.Data)
  return data_.Mutable(index);
}
inline void TestData::set_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:TestData.TestData.Data)
  data_.Mutable(index)->assign(value);
}
inline void TestData::set_data(int index, const char* value) {
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TestData.TestData.Data)
}
inline void TestData::set_data(int index, const char* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TestData.TestData.Data)
}
inline ::std::string* TestData::add_data() {
  // @@protoc_insertion_point(field_add_mutable:TestData.TestData.Data)
  return data_.Add();
}
inline void TestData::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TestData.TestData.Data)
}
inline void TestData::add_data(const char* value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TestData.TestData.Data)
}
inline void TestData::add_data(const char* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TestData.TestData.Data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TestData::data() const {
  // @@protoc_insertion_point(field_list:TestData.TestData.Data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TestData::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:TestData.TestData.Data)
  return &data_;
}

// repeated .TestData.TestData.Test2 Data2 = 3;
inline int TestData::data2_size() const {
  return data2_.size();
}
inline void TestData::clear_data2() {
  data2_.Clear();
}
inline const ::TestData::TestData_Test2& TestData::data2(int index) const {
  // @@protoc_insertion_point(field_get:TestData.TestData.Data2)
  return data2_.Get(index);
}
inline ::TestData::TestData_Test2* TestData::mutable_data2(int index) {
  // @@protoc_insertion_point(field_mutable:TestData.TestData.Data2)
  return data2_.Mutable(index);
}
inline ::TestData::TestData_Test2* TestData::add_data2() {
  // @@protoc_insertion_point(field_add:TestData.TestData.Data2)
  return data2_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::TestData::TestData_Test2 >*
TestData::mutable_data2() {
  // @@protoc_insertion_point(field_mutable_list:TestData.TestData.Data2)
  return &data2_;
}
inline const ::google::protobuf::RepeatedPtrField< ::TestData::TestData_Test2 >&
TestData::data2() const {
  // @@protoc_insertion_point(field_list:TestData.TestData.Data2)
  return data2_;
}

inline const TestData* TestData::internal_default_instance() {
  return &TestData_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TestData

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TestData_2eProto__INCLUDED
