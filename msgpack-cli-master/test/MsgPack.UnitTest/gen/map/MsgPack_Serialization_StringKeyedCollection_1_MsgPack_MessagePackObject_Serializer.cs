//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.34209
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MsgPack.Serialization.GeneratedSerializers.MapBased {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MsgPack.Serialization.CodeDomSerializers.CodeDomSerializerBuilder", "0.6.0.0")]
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class MsgPack_Serialization_StringKeyedCollection_1_MsgPack_MessagePackObject_Serializer : MsgPack.Serialization.CollectionSerializers.CollectionMessagePackSerializer<MsgPack.Serialization.StringKeyedCollection<MsgPack.MessagePackObject>, MsgPack.MessagePackObject> {
        
        public MsgPack_Serialization_StringKeyedCollection_1_MsgPack_MessagePackObject_Serializer(MsgPack.Serialization.SerializationContext context) : 
                base(context, MsgPack_Serialization_StringKeyedCollection_1_MsgPack_MessagePackObject_Serializer.RestoreSchema()) {
        }
        
        protected override MsgPack.Serialization.StringKeyedCollection<MsgPack.MessagePackObject> CreateInstance(int initialCapacity) {
            MsgPack.Serialization.StringKeyedCollection<MsgPack.MessagePackObject> collection = default(MsgPack.Serialization.StringKeyedCollection<MsgPack.MessagePackObject>);
            collection = new MsgPack.Serialization.StringKeyedCollection<MsgPack.MessagePackObject>();
            return collection;
        }
        
        private static MsgPack.Serialization.PolymorphismSchema RestoreSchema() {
            MsgPack.Serialization.PolymorphismSchema schema = default(MsgPack.Serialization.PolymorphismSchema);
            schema = null;
            return schema;
        }
        
        private static T @__Conditional<T>(bool condition, T whenTrue, T whenFalse)
         {
            if (condition) {
                return whenTrue;
            }
            else {
                return whenFalse;
            }
        }
    }
}
