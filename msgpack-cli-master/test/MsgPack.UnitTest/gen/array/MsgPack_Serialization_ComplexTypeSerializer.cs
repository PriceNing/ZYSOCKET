//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:4.0.30319.34209
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MsgPack.Serialization.GeneratedSerializers.ArrayBased {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MsgPack.Serialization.CodeDomSerializers.CodeDomSerializerBuilder", "0.6.0.0")]
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class MsgPack_Serialization_ComplexTypeSerializer : MsgPack.Serialization.MessagePackSerializer<MsgPack.Serialization.ComplexType> {
        
        private MsgPack.Serialization.MessagePackSerializer<System.Uri> _serializer0;
        
        private MsgPack.Serialization.MessagePackSerializer<byte[]> _serializer1;
        
        private MsgPack.Serialization.MessagePackSerializer<System.DateTime> _serializer2;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Collections.Generic.Dictionary<System.DateTime, string>> _serializer3;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Collections.Generic.List<int>> _serializer4;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Nullable<System.DateTime>> _serializer5;
        
        private System.Reflection.MethodBase _methodBaseComplexType_set_Points0;
        
        public MsgPack_Serialization_ComplexTypeSerializer(MsgPack.Serialization.SerializationContext context) : 
                base(context) {
            MsgPack.Serialization.PolymorphismSchema schema0 = default(MsgPack.Serialization.PolymorphismSchema);
            schema0 = null;
            this._serializer0 = context.GetSerializer<System.Uri>(schema0);
            MsgPack.Serialization.PolymorphismSchema schema1 = default(MsgPack.Serialization.PolymorphismSchema);
            schema1 = null;
            this._serializer1 = context.GetSerializer<byte[]>(schema1);
            this._serializer2 = context.GetSerializer<System.DateTime>(MsgPack.Serialization.DateTimeMessagePackSerializerHelpers.DetermineDateTimeConversionMethod(context, MsgPack.Serialization.DateTimeMemberConversionMethod.Default));
            MsgPack.Serialization.PolymorphismSchema schema2 = default(MsgPack.Serialization.PolymorphismSchema);
            schema2 = null;
            this._serializer3 = context.GetSerializer<System.Collections.Generic.Dictionary<System.DateTime, string>>(schema2);
            MsgPack.Serialization.PolymorphismSchema schema3 = default(MsgPack.Serialization.PolymorphismSchema);
            schema3 = null;
            this._serializer4 = context.GetSerializer<System.Collections.Generic.List<int>>(schema3);
            this._serializer5 = context.GetSerializer<System.Nullable<System.DateTime>>(MsgPack.Serialization.DateTimeMessagePackSerializerHelpers.DetermineDateTimeConversionMethod(context, MsgPack.Serialization.DateTimeMemberConversionMethod.Default));
            this._methodBaseComplexType_set_Points0 = typeof(MsgPack.Serialization.ComplexType).GetMethod("set_Points", (System.Reflection.BindingFlags.Instance 
                            | (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.NonPublic)), null, new System.Type[] {
                        typeof(System.Collections.Generic.List<int>)}, null);
        }
        
        protected internal override void PackToCore(MsgPack.Packer packer, MsgPack.Serialization.ComplexType objectTree) {
            packer.PackArrayHeader(5);
            this._serializer0.PackTo(packer, objectTree.Source);
            this._serializer1.PackTo(packer, objectTree.Data);
            this._serializer2.PackTo(packer, objectTree.TimeStamp);
            this._serializer3.PackTo(packer, objectTree.History);
            this._serializer4.PackTo(packer, objectTree.Points);
        }
        
        protected internal override MsgPack.Serialization.ComplexType UnpackFromCore(MsgPack.Unpacker unpacker) {
            MsgPack.Serialization.ComplexType result = default(MsgPack.Serialization.ComplexType);
            result = new MsgPack.Serialization.ComplexType();
            if (unpacker.IsArrayHeader) {
                int unpacked = default(int);
                int itemsCount = default(int);
                itemsCount = MsgPack.Serialization.UnpackHelpers.GetItemsCount(unpacker);
                System.Uri nullable = default(System.Uri);
                if ((unpacked < itemsCount)) {
                    if ((unpacker.Read() == false)) {
                        throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(0);
                    }
                    if (((unpacker.IsArrayHeader == false) 
                                && (unpacker.IsMapHeader == false))) {
                        nullable = this._serializer0.UnpackFrom(unpacker);
                    }
                    else {
                        MsgPack.Unpacker disposable = default(MsgPack.Unpacker);
                        disposable = unpacker.ReadSubtree();
                        try {
                            nullable = this._serializer0.UnpackFrom(disposable);
                        }
                        finally {
                            if (((disposable == null) 
                                        == false)) {
                                disposable.Dispose();
                            }
                        }
                    }
                }
                if (((nullable == null) 
                            == false)) {
                    result.Source = nullable;
                }
                unpacked = (unpacked + 1);
                byte[] nullable0 = default(byte[]);
                if ((unpacked < itemsCount)) {
                    nullable0 = MsgPack.Serialization.UnpackHelpers.UnpackBinaryValue(unpacker, typeof(MsgPack.Serialization.ComplexType), "Byte[] Data");
                }
                if (((nullable0 == null) 
                            == false)) {
                    result.Data = nullable0;
                }
                unpacked = (unpacked + 1);
                System.Nullable<System.DateTime> nullable1 = default(System.Nullable<System.DateTime>);
                if ((unpacked < itemsCount)) {
                    if ((unpacker.Read() == false)) {
                        throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(2);
                    }
                    if (((unpacker.IsArrayHeader == false) 
                                && (unpacker.IsMapHeader == false))) {
                        nullable1 = this._serializer5.UnpackFrom(unpacker);
                    }
                    else {
                        MsgPack.Unpacker disposable0 = default(MsgPack.Unpacker);
                        disposable0 = unpacker.ReadSubtree();
                        try {
                            nullable1 = this._serializer5.UnpackFrom(disposable0);
                        }
                        finally {
                            if (((disposable0 == null) 
                                        == false)) {
                                disposable0.Dispose();
                            }
                        }
                    }
                }
                if (nullable1.HasValue) {
                    result.TimeStamp = nullable1.Value;
                }
                unpacked = (unpacked + 1);
                System.Collections.Generic.Dictionary<System.DateTime, string> nullable2 = default(System.Collections.Generic.Dictionary<System.DateTime, string>);
                if ((unpacked < itemsCount)) {
                    if ((unpacker.Read() == false)) {
                        throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(3);
                    }
                    if (((unpacker.IsArrayHeader == false) 
                                && (unpacker.IsMapHeader == false))) {
                        nullable2 = this._serializer3.UnpackFrom(unpacker);
                    }
                    else {
                        MsgPack.Unpacker disposable1 = default(MsgPack.Unpacker);
                        disposable1 = unpacker.ReadSubtree();
                        try {
                            nullable2 = this._serializer3.UnpackFrom(disposable1);
                        }
                        finally {
                            if (((disposable1 == null) 
                                        == false)) {
                                disposable1.Dispose();
                            }
                        }
                    }
                }
                if (((nullable2 == null) 
                            == false)) {
                    System.Collections.Generic.Dictionary<System.DateTime, string>.Enumerator enumerator = nullable2.GetEnumerator();
                    System.Collections.Generic.KeyValuePair<System.DateTime, string> current;
                    try {
                        for (
                        ; enumerator.MoveNext(); 
                        ) {
                            current = enumerator.Current;
                            result.History.Add(current.Key, current.Value);
                        }
                    }
                    finally {
                        enumerator.Dispose();
                    }
                }
                unpacked = (unpacked + 1);
                System.Collections.Generic.List<int> nullable3 = default(System.Collections.Generic.List<int>);
                if ((unpacked < itemsCount)) {
                    if ((unpacker.Read() == false)) {
                        throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(4);
                    }
                    if (((unpacker.IsArrayHeader == false) 
                                && (unpacker.IsMapHeader == false))) {
                        nullable3 = this._serializer4.UnpackFrom(unpacker);
                    }
                    else {
                        MsgPack.Unpacker disposable2 = default(MsgPack.Unpacker);
                        disposable2 = unpacker.ReadSubtree();
                        try {
                            nullable3 = this._serializer4.UnpackFrom(disposable2);
                        }
                        finally {
                            if (((disposable2 == null) 
                                        == false)) {
                                disposable2.Dispose();
                            }
                        }
                    }
                }
                if (((nullable3 == null) 
                            == false)) {
                    if ((result.Points == null)) {
                        this._methodBaseComplexType_set_Points0.Invoke(result, new object[] {
                                    nullable3});
                    }
                    else {
                        System.Collections.Generic.List<int>.Enumerator enumerator0 = nullable3.GetEnumerator();
                        int current0;
                        try {
                            for (
                            ; enumerator0.MoveNext(); 
                            ) {
                                current0 = enumerator0.Current;
                                result.Points.Add(current0);
                            }
                        }
                        finally {
                            enumerator0.Dispose();
                        }
                    }
                }
                unpacked = (unpacked + 1);
            }
            else {
                int itemsCount0 = default(int);
                itemsCount0 = MsgPack.Serialization.UnpackHelpers.GetItemsCount(unpacker);
                for (int i = 0; (i < itemsCount0); i = (i + 1)) {
                    string key = default(string);
                    string nullable4 = default(string);
                    nullable4 = MsgPack.Serialization.UnpackHelpers.UnpackStringValue(unpacker, typeof(MsgPack.Serialization.ComplexType), "MemberName");
                    if (((nullable4 == null) 
                                == false)) {
                        key = nullable4;
                    }
                    else {
                        throw MsgPack.Serialization.SerializationExceptions.NewNullIsProhibited("MemberName");
                    }
                    if ((key == "Points")) {
                        System.Collections.Generic.List<int> nullable9 = default(System.Collections.Generic.List<int>);
                        if ((unpacker.Read() == false)) {
                            throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                        }
                        if (((unpacker.IsArrayHeader == false) 
                                    && (unpacker.IsMapHeader == false))) {
                            nullable9 = this._serializer4.UnpackFrom(unpacker);
                        }
                        else {
                            MsgPack.Unpacker disposable6 = default(MsgPack.Unpacker);
                            disposable6 = unpacker.ReadSubtree();
                            try {
                                nullable9 = this._serializer4.UnpackFrom(disposable6);
                            }
                            finally {
                                if (((disposable6 == null) 
                                            == false)) {
                                    disposable6.Dispose();
                                }
                            }
                        }
                        if (((nullable9 == null) 
                                    == false)) {
                            if ((result.Points == null)) {
                                this._methodBaseComplexType_set_Points0.Invoke(result, new object[] {
                                            nullable9});
                            }
                            else {
                                System.Collections.Generic.List<int>.Enumerator enumerator2 = nullable9.GetEnumerator();
                                int current2;
                                try {
                                    for (
                                    ; enumerator2.MoveNext(); 
                                    ) {
                                        current2 = enumerator2.Current;
                                        result.Points.Add(current2);
                                    }
                                }
                                finally {
                                    enumerator2.Dispose();
                                }
                            }
                        }
                    }
                    else {
                        if ((key == "History")) {
                            System.Collections.Generic.Dictionary<System.DateTime, string> nullable8 = default(System.Collections.Generic.Dictionary<System.DateTime, string>);
                            if ((unpacker.Read() == false)) {
                                throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                            }
                            if (((unpacker.IsArrayHeader == false) 
                                        && (unpacker.IsMapHeader == false))) {
                                nullable8 = this._serializer3.UnpackFrom(unpacker);
                            }
                            else {
                                MsgPack.Unpacker disposable5 = default(MsgPack.Unpacker);
                                disposable5 = unpacker.ReadSubtree();
                                try {
                                    nullable8 = this._serializer3.UnpackFrom(disposable5);
                                }
                                finally {
                                    if (((disposable5 == null) 
                                                == false)) {
                                        disposable5.Dispose();
                                    }
                                }
                            }
                            if (((nullable8 == null) 
                                        == false)) {
                                System.Collections.Generic.Dictionary<System.DateTime, string>.Enumerator enumerator1 = nullable8.GetEnumerator();
                                System.Collections.Generic.KeyValuePair<System.DateTime, string> current1;
                                try {
                                    for (
                                    ; enumerator1.MoveNext(); 
                                    ) {
                                        current1 = enumerator1.Current;
                                        result.History.Add(current1.Key, current1.Value);
                                    }
                                }
                                finally {
                                    enumerator1.Dispose();
                                }
                            }
                        }
                        else {
                            if ((key == "TimeStamp")) {
                                System.Nullable<System.DateTime> nullable7 = default(System.Nullable<System.DateTime>);
                                if ((unpacker.Read() == false)) {
                                    throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                                }
                                if (((unpacker.IsArrayHeader == false) 
                                            && (unpacker.IsMapHeader == false))) {
                                    nullable7 = this._serializer5.UnpackFrom(unpacker);
                                }
                                else {
                                    MsgPack.Unpacker disposable4 = default(MsgPack.Unpacker);
                                    disposable4 = unpacker.ReadSubtree();
                                    try {
                                        nullable7 = this._serializer5.UnpackFrom(disposable4);
                                    }
                                    finally {
                                        if (((disposable4 == null) 
                                                    == false)) {
                                            disposable4.Dispose();
                                        }
                                    }
                                }
                                if (nullable7.HasValue) {
                                    result.TimeStamp = nullable7.Value;
                                }
                            }
                            else {
                                if ((key == "Data")) {
                                    byte[] nullable6 = default(byte[]);
                                    nullable6 = MsgPack.Serialization.UnpackHelpers.UnpackBinaryValue(unpacker, typeof(MsgPack.Serialization.ComplexType), "Byte[] Data");
                                    if (((nullable6 == null) 
                                                == false)) {
                                        result.Data = nullable6;
                                    }
                                }
                                else {
                                    if ((key == "Source")) {
                                        System.Uri nullable5 = default(System.Uri);
                                        if ((unpacker.Read() == false)) {
                                            throw MsgPack.Serialization.SerializationExceptions.NewMissingItem(i);
                                        }
                                        if (((unpacker.IsArrayHeader == false) 
                                                    && (unpacker.IsMapHeader == false))) {
                                            nullable5 = this._serializer0.UnpackFrom(unpacker);
                                        }
                                        else {
                                            MsgPack.Unpacker disposable3 = default(MsgPack.Unpacker);
                                            disposable3 = unpacker.ReadSubtree();
                                            try {
                                                nullable5 = this._serializer0.UnpackFrom(disposable3);
                                            }
                                            finally {
                                                if (((disposable3 == null) 
                                                            == false)) {
                                                    disposable3.Dispose();
                                                }
                                            }
                                        }
                                        if (((nullable5 == null) 
                                                    == false)) {
                                            result.Source = nullable5;
                                        }
                                    }
                                    else {
                                        unpacker.Skip();
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return result;
        }
        
        private static T @__Conditional<T>(bool condition, T whenTrue, T whenFalse)
         {
            if (condition) {
                return whenTrue;
            }
            else {
                return whenFalse;
            }
        }
    }
}
